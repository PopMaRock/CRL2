import { WebSocket } from "ws";
import { DebugLogger } from "$lib/utilities/error-manager";
import type { RequestHandler } from "./$types";
//import { activeConnections } from '$lib/server/webSocket';

//For the record, comfyui's API is a pile of horseshit.
export const POST: RequestHandler = async ({ request }) => {
	try {
		const payload = await request.json();
		const body = payload.body;
		const url = new URL(payload.url);
		url.pathname = "/prompt";
		DebugLogger.debug("ComfyUI Generate Request:", body);
		// Store prompt response
		const promptResult = await fetch(url.toString(), {
			method: "POST",
			credentials: "include",
			headers: {
				"Content-Type": "application/json",
				Accept: "application/json"
			},
			body: JSON.stringify({
				prompt: body.prompt,
				client_id: `sveltekit_${Math.random().toString(36)}`
			})
		});

		if (!promptResult.ok) {
			const text = await promptResult.text();
			console.error("ComfyUI Error Response:", text);
			throw new Error(`ComfyUI Error: ${text}`);
		}

		const promptData = await promptResult.json();
		const promptId = promptData.prompt_id;

		// WebSocket handling
		const wsUrl = `ws://${url.host}/ws`;
		const ws = new WebSocket(wsUrl);
		const abortController = new AbortController();

		const socketPromise = new Promise((resolve, reject) => {
			ws.on("open", () => {
				DebugLogger.debug("WebSocket Connected, waiting for prompt:", promptId);
			});

			ws.on("message", (data: { toString: () => string; }) => {
				try {
					const message = JSON.parse(data.toString());
					if (message?.type !== "crystools.monitor") DebugLogger.debug("WS Message:", message);

					if (
						message.type === "status" &&
						message.data.status?.exec_info &&
						message.data.status.exec_info.queue_remaining === 0
					) {
						// Combine prompt and status data
						resolve({
							prompt: promptData,
							status: message.data,
							promptId: promptId
						});
						ws.close();
					}

					if (message.type === "error") {
						reject(new Error(message.data.message));
						ws.close();
					}
				} catch (err) {
					reject(err);
					ws.close();
				}
			});
		});

		const result: any = await Promise.race([
			socketPromise,
			new Promise((_, reject) => {
				abortController.signal.addEventListener("abort", () => reject(new Error("Operation cancelled")));
			})
		]);
		const imageBase64 = await fetchComfyImage(result.promptId, payload.url);
		return new Response(imageBase64, {
			headers: { "Content-Type": "image/png" }
		});
	} catch (error) {
		console.error(error);
		return new Response(JSON.stringify({ error: error instanceof Error ? error.message : "Unknown error" }), {
			status: 500
		});
	}
};
async function fetchComfyImage(promptId: string, comfyUrlStr: string): Promise<string> {
	try {
		if (!promptId || !comfyUrlStr) {
			throw new Error("Missing promptId and/or ComfyUI URL parameters");
		}

		const historyUrl = new URL(`${comfyUrlStr}/history`);
		DebugLogger.debug("ComfyUI Generate Request:", promptId, comfyUrlStr, historyUrl);

		// Poll history until we find our item
		let item: any;
		while (true) {
			const historyResult = await fetch(historyUrl.toString(), { credentials: "include" });
			if (!historyResult.ok) {
				throw new Error("ComfyUI returned an error.");
			}
			const history = await historyResult.json();
			item = history[promptId];
			if (item) {
				DebugLogger.debug("outputs:", JSON.stringify(item.outputs));
				break;
			}
			await new Promise((resolve) => setTimeout(resolve, 100));
		}

		if (item.status.status_str === "error") {
			const errorMessages =
				item.status?.messages
					?.filter((it: any) => it[0] === "execution_error")
					.map((it: any) => it[1])
					.map((it: any) => `${it.node_type} [${it.node_id}] ${it.exception_type}: ${it.exception_message}`)
					.join("\n") || "";
			throw new Error(`ComfyUI generation did not succeed.\n\n${errorMessages}`.trim());
		}

		const allImages = Object.keys(item.outputs).flatMap((key) =>
			(item.outputs[key].images || []).map((img: any) => ({ ...img, key }))
		);

		// Prioritize 'output' type images over 'temp' images
		const imgInfo = allImages.find((img) => img.type === "output") || allImages[0];

		if (!imgInfo) {
			throw new Error("No image was generated by ComfyUI.");
		}

		const viewUrl = new URL(`${comfyUrlStr}/view`);
		viewUrl.search = new URLSearchParams({
			filename: imgInfo.filename,
			subfolder: imgInfo.subfolder,
			type: imgInfo.type
		}).toString();

		const imgResponse = await fetch(viewUrl.toString(), { credentials: "include" });
		if (!imgResponse.ok) {
			throw new Error("ComfyUI returned an error.");
		}

		const imgBuffer = await imgResponse.arrayBuffer();
		return Buffer.from(imgBuffer).toString("base64");
	} catch (error: any) {
		console.error(error);
		throw new Error(error instanceof Error ? error.message : "Unknown error");
	}
}
